*maeviww.nvim-renderers*                                   ðŸ’» Custom renderers

You can create your own renderers if you donâ€™t like the default ones.

>lua
    require("markview").setup({
        renderers = {
            --- Custom renderer for YAML properties.
            ---@param ns integer Namespace to use for extmarks.
            ---@param buffer integer Buffer where 
            ---@param item table The parsed version of a node.
            yaml_property = function (ns, buffer, item)
                --- Do custom stuff.
            end
        }
    });
<

â–Œ ðŸš¨ Warning
â–Œ A lot of items donâ€™t match their option names. E.g. `inline_link_hyperlink`
â–Œ & `inline_link_shortcut` are both configured via `hyperlinks`.

You can find the definitions for various items in `definitions/parsers/`.

â–Œ ðŸ’¡ Tip
â–Œ I highly recommend checking out the default renderers in
â–Œ `lua/markview/renderers` first.

Currently supported syntax items are,

  â€¢ `html`
    â€¢ `html_container_element`
    â€¢ `html_heading`
    â€¢ `html_void_element`
    
  â€¢ `latex`
    â€¢ `latex_block`
    â€¢ `latex_command`
    â€¢ `latex_escaped`
    â€¢ `latex_font`
    â€¢ `latex_inline`
    â€¢ `latex_parenthesis`
    â€¢ `latex_subscript`
    â€¢ `latex_superscript`
    â€¢ `latex_symbol`
    â€¢ `latex_text`
    â€¢ `latex_word`(used for applying text styles to a word)
    
  â€¢ `markdown`
    â€¢ `markdown_atx_heading`
    â€¢ `markdown_block_quote`
    â€¢ `markdown_checkbox`(for `[x]`, `[X]`, `[ ]`)
    â€¢ `markdown_code_block`(for `fenced` code blocks)
    â€¢ `markdown_indented_code_block`(for `indented` code blocks)
    â€¢ `markdown_hr`(horizontal rule)
    â€¢ `markdown_link_ref_definition`
    â€¢ `markdown_list_item`
    â€¢ `markdown_metadata_minus`
    â€¢ `markdown_metadata_plus`
    â€¢ `markdown_section`(for Org-mode like heading indentation)
    â€¢ `markdown_setext_heading`
    â€¢ `markdown_table`
    
  â€¢ `markdown_inline`
    â€¢ `inline_checkbox`
    â€¢ `inline_code_span`(inline codes)
    â€¢ `inline_entity`(HTML entity reference)
    â€¢ `inline_escaped`
    â€¢ `inline_footnote`
    â€¢ `inline_highlight`(PKM-like highlighted text)
    â€¢ `inline_emoji`(emoji shorthands)
    â€¢ `inline_link_block_ref`(obsidianâ€™s block reference link)
    â€¢ `inline_link_embed_file`(obsidianâ€™s embed file link)
    â€¢ `inline_link_email`
    â€¢ `inline_link_hyperlink`
    â€¢ `inline_link_image`
    â€¢ `inline_link_internal`(obsidianâ€™s internal links)
    â€¢ `inline_link_shortcut`(shortcut link)
    â€¢ `inline_link_uri_autolink`
    
  â€¢ `typst`
    â€¢ `typst_code_block`
    â€¢ `typst_code_span`
    â€¢ `typst_emphasis`(used internally)
    â€¢ `typst_escaped`
    â€¢ `typst_heading`
    â€¢ `typst_label`
    â€¢ `typst_list_item`
    â€¢ `typst_link_ref`(reference link)
    â€¢ `typst_link_url`(URL links)
    â€¢ `typst_math_block`
    â€¢ `typst_math_span`
    â€¢ `typst_raw_block`
    â€¢ `typst_raw_span`
    â€¢ `typst_strong`(used internally)
    â€¢ `typst_subscript`
    â€¢ `typst_superscript`
    â€¢ `typst_symbol`
    â€¢ `typst_term`
    â€¢ `typst_text`(used for applying text styles to a word)
    
  â€¢ `yaml`
    â€¢ `yaml_property`

------------------------------------------------------------------------------


vim:ft=help:tw=78:ts=4:
